
## My Feature Idea

[DESCRIBE YOUR FEATURE HERE IN DETAIL]



Please help me implement this feature by providing the code changes I need to make. I'll need:
1. Any changes needed to the database model/TeamMember interface
2. UI components or modifications to existing components
3. API changes if needed
4. Clear, step-by-step instructions for implementing these changes
```


--------

```
I'm working on a simple team member management web application built with Next.js and Azure Cosmos DB. I'll provide all the code files below so you understand the full architecture before helping me implement my new feature.

## System Architecture

This is a full-stack application with:
- Frontend: React components using Next.js
- Backend: Next.js API routes
- Database: Azure Cosmos DB
- Security: IP-based partitioning to isolate data

Each team member is stored as a separate document in Cosmos DB, partitioned by the user's IP address so different users only see their own team members.

## Current Features
- Add team members with name and age
- View all team members
- Delete team members
- Display a random animal for each team member

## Code Base

### 1. Frontend Page (src/app/page.tsx)

```typescript
'use client';

import React, { useEffect, useState } from 'react';

interface TeamMember {
  id: string;
  name: string;
  age: string | number;
  ipAddress: string;
  animal?: string;
}

export default function Home() {
  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);
  const [teamMemberName, setTeamMemberName] = useState('');
  const [teamMemberAge, setTeamMemberAge] = useState('');
  const [loading, setLoading] = useState(true);

  // Load team members on component mount
  useEffect(() => {
    loadTeamMembers();
  }, []);

  // Function to load team members
  async function loadTeamMembers() {
    setLoading(true);
    
    const res = await fetch('/api/team');
    const data = await res.json();
    setTeamMembers(data);
    
    setLoading(false);
  }

  // Function to fetch a random animal
  async function getRandomAnimal() {
    try {
      const res = await fetch('https://random-animal-api.vercel.app/api/random-animal');
      const data = await res.json();
      return data.animal;
    } catch (error) {
      console.error('Failed to fetch random animal', error);
      return 'Unknown Animal';
    }
  }

  // Add a new team member
  async function addTeamMember() {
    if (!teamMemberName.trim() || !teamMemberAge.trim()) return;
    
    setLoading(true);
    
    // Get a random animal
    const animal = await getRandomAnimal();
    
    const res = await fetch('/api/team', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: teamMemberName,
        age: teamMemberAge,
        animal: animal
      }),
    });
    
    const newMember = await res.json();
    setTeamMembers(prev => [...prev, newMember]);
    setTeamMemberName('');
    setTeamMemberAge('');
    
    setLoading(false);
  }

  // Delete a team member
  async function deleteTeamMember(id: string) {
    setLoading(true);
    
    await fetch(`/api/team/${id}`, {
      method: 'DELETE',
    });
    
    setTeamMembers(prev => prev.filter(m => m.id !== id));
    setLoading(false);
  }

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center py-8">
      <h1 className="text-4xl font-bold text-gray-800 mb-6">My Workshop Team Members</h1>

      <div className="w-full max-w-md bg-white shadow-md rounded px-8 py-6">
        <div className="space-y-4">
          <div>
            <label className="block text-lg font-medium text-gray-700 mb-1">Team Member Name:</label>
            <input
              type="text"
              value={teamMemberName}
              onChange={(e) => setTeamMemberName(e.target.value)}
              className="border border-gray-300 p-2 rounded w-full"
              disabled={loading}
            />
          </div>
          <div>
            <label className="block text-lg font-medium text-gray-700 mb-1">Age:</label>
            <input
              type="number"
              value={teamMemberAge}
              onChange={(e) => setTeamMemberAge(e.target.value)}
              className="border border-gray-300 p-2 rounded w-full"
              disabled={loading}
            />
          </div>
          <button
            className={`w-full text-white font-semibold py-2 rounded ${
              loading ? 'bg-gray-400' : 'bg-blue-500 hover:bg-blue-600'
            }`}
            onClick={addTeamMember}
            disabled={loading}
          >
            {loading ? 'Processing...' : 'Add Member'}
          </button>
        </div>

        <div className="mt-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-semibold text-gray-800">Current Team Members</h2>
            <button 
              onClick={loadTeamMembers}
              className="text-blue-500 text-sm hover:underline"
              disabled={loading}
            >
              Refresh
            </button>
          </div>
          
          {loading ? (
            <p className="text-gray-500 text-center py-4">Loading team members...</p>
          ) : teamMembers.length === 0 ? (
            <p className="text-gray-500 text-center py-4">No team members added yet.</p>
          ) : (
            <ul>
              {teamMembers.map(m => (
                <li key={m.id} className="p-3 border-b border-gray-200 flex justify-between items-center">
                  <div>
                    <span className="font-medium text-gray-700">{m.name}</span> (Age: {m.age})
                    {m.animal && <span className="ml-2 text-blue-500">â€¢ {m.animal}</span>}
                  </div>
                  <button
                    className="text-red-500 hover:underline"
                    onClick={() => deleteTeamMember(m.id)}
                    disabled={loading}
                  >
                    Delete
                  </button>
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </div>
  );
}
```

### 2. Team API (src/pages/api/team/index.ts)

```typescript
import type { NextApiRequest, NextApiResponse } from 'next';
import { getContainer } from '../../../lib/cosmos-simplified';
import { ipAuthMiddleware } from '../../../middleware/ip-auth';

async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Get the user's IP (attached by the middleware)
  const clientIp = req.userIP;
  
  // Get the container
  const container = getContainer();
  
  if (req.method === 'GET') {
    // Query for all team members with this IP as the partition key
    const querySpec = {
      query: "SELECT * FROM c WHERE c.ipAddress = @ipAddress",
      parameters: [
        {
          name: "@ipAddress",
          value: clientIp
        }
      ]
    };
    
    const { resources: teamMembers } = await container.items.query(querySpec).fetchAll();
    return res.status(200).json(teamMembers);
  } 
  else if (req.method === 'POST') {
    const { name, age, animal } = req.body;
    
    // Create a document for the team member
    const newMember = {
      id: Date.now().toString(), // Use timestamp as ID
      ipAddress: clientIp,       // Use IP as partition key
      name,
      age,
      animal
    };
    
    const { resource: createdMember } = await container.items.create(newMember);
    return res.status(201).json(createdMember);
  } 
  else {
    res.setHeader('Allow', ['GET', 'POST']);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}

// Wrap the handler with the IP authentication middleware
export default ipAuthMiddleware(handler);
```

### 3. Delete API (src/pages/api/team/[id].ts)

```typescript
import type { NextApiRequest, NextApiResponse } from 'next';
import { getContainer } from '../../../lib/cosmos-simplified';
import { ipAuthMiddleware } from '../../../middleware/ip-auth';

async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'DELETE') {
    res.setHeader('Allow', ['DELETE']);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }
  
  // Get the user's IP (attached by the middleware)
  const clientIp = req.userIP;
  
  // Get team member ID to delete
  const teamMemberId = req.query.id as string;
  
  // Delete the document directly by ID and partition key
  // This ensures users can only delete items from their own IP partition
  await getContainer().item(teamMemberId, clientIp).delete();
  
  return res.status(200).json({ message: 'Team member deleted successfully' });
}

// Wrap the handler with the IP authentication middleware
export default ipAuthMiddleware(handler);
```

### 4. Cosmos DB Connection (src/lib/cosmos-simplified.ts)

```typescript
import { CosmosClient } from "@azure/cosmos";

// Create a client to reuse
let cosmosClient: CosmosClient | null = null;

export function getContainer() {
  const endpoint = process.env.COSMOS_ENDPOINT!;
  const masterKey = process.env.COSMOS_KEY!;
  const dbName = process.env.DB_NAME!;
  const containerName = process.env.CONTAINER_NAME!;

  // Create client if it doesn't exist
  if (!cosmosClient) {
    cosmosClient = new CosmosClient({
      endpoint,
      key: masterKey
    });
  }

  return cosmosClient.database(dbName).container(containerName);
}
```

### 5. IP Authentication Middleware (src/middleware/ip-auth.ts)

```typescript
import type { NextApiRequest, NextApiResponse, NextApiHandler } from 'next';

// This middleware enforces that users can only specify their own IP in queries
export function ipAuthMiddleware(handler: NextApiHandler) {
  return async (req: NextApiRequest, res: NextApiResponse) => {
    // Get the user's actual IP
    const ipResponse = await fetch("https://api.ipify.org?format=json");
    const { ip: userIP } = await ipResponse.json();
    
    // Check if they're trying to access data from a different IP partition
    const requestedIP = req.query.ipAddress || req.body?.ipAddress;
    
    if (requestedIP && requestedIP !== userIP) {
      return res.status(403).json({ 
        error: "You can only access data from your own IP address" 
      });
    }
    
    // Always enforce that operations use the correct IP
    // Attach the IP to the request for handlers to use
    req.userIP = userIP;
    
    // Call the original handler
    return handler(req, res);
  };
}
```